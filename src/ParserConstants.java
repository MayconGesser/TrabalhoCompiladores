public interface ParserConstants
{
    int START_SYMBOL = 55;

    int FIRST_NON_TERMINAL    = 55;
    int FIRST_SEMANTIC_ACTION = 89;

    int[][] PARSER_TABLE =
    {
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1,  1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, 33, -1, 35, -1, -1, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, 36, 32, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, -1, 31, 37, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 78, 78, 77, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 79, 80, -1, 83, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 82, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1,  2,  2,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1,  2, -1,  3, -1, -1, -1, -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  3, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 47, 47, 47, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 47, -1, -1, -1, -1 },
        { -1, 56, 56, 56, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 56, -1, -1, -1, -1 },
        { -1, 73, 73, 72, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 73, -1, -1, -1, -1, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71, 70, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 44, 44, 44, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, 44, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, -1, -1, -1, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, -1, -1, -1, 50, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, 54, 53, -1, 55 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, 19, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, 41, -1, 43, -1, 42, -1, -1, -1, 40, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, -1, 58, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, -1, -1, 58, -1, -1, -1, -1, -1, 58, 57, -1, 58, 58, 58, -1, 58, 58, 58, -1, -1, 58, -1, -1, 57, 58, 58, -1, 58 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, 13, 13, -1, -1, 12, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, 63, -1, 64, -1, 64, -1, -1, -1, -1, -1, -1, 64, -1, -1, -1, -1, -1, -1, 64, -1, -1, -1, -1, -1, 64, 64, 63, 64, 64, 64, 63, 64, 64, 64, -1, -1, 64, -1, -1, 64, 64, 64, -1, 64 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, 48, -1, -1, 49, 48, 49, -1, 48, 49, 49, -1, -1, 49, -1, -1, -1, 48, 48, -1, 48 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, 76, 76, -1, 76, -1, 76, -1, -1, -1, -1, -1, -1, 76, -1, -1, -1, -1, -1, -1, 76, -1, -1, -1, -1, -1, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 75, -1, 76, -1, 74, 76, 76, 76, -1, 76 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 62, 62, 62, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, 62, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1,  6,  8,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1,  4, -1, -1, -1, -1, -1, -1,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1 }
    };

    int[][] PRODUCTIONS = 
    {
        {  24,   4, 190,  47,  56,  48 },
        {  63,  62,  57 },
        {  87,  64, 191,  69, 192,  68, 193,  47,  63 },
        {   0 },
        {  18, 194 },
        {  25, 195 },
        {   6, 196 },
        {   8, 197 },
        {   7,  45,  59, 198,  38 },
        { 199,  45,  59, 200,  38 },
        { 201 },
        {   4, 202,  79 },
        {  43,  69 },
        {   0 },
        { 203,  39,  59, 204 },
        { 205 },
        {  61,  47,  62 },
        {   0 },
        {  20,   4, 206,  75, 207,  88, 208,  47,  56, 209 },
        {  49,  71, 210,  69, 211,  34,  87, 212,  80,  40 },
        {   0 },
        {  47,  71, 210,  69, 211,  34,  87, 212,  80 },
        {   0 },
        {  34,  87, 213 },
        { 214 },
        {  26, 215 },
        {  30, 216 },
        {  46,  58,  82,  44 },
        {  47,  58,  82 },
        {   0 },
        {   4, 217,  76 },
        {  57 },
        {  28,  65, 218,  13,  58,  85 },
        {  12,  65, 218,  15,  58 },
        {  19,  49, 219,  69,  40 },
        {  14,  49, 220,  70,  40 },
        {  27,  65, 221 },
        {   0 },
        {  29,  58 },
        {   0 },
        { 222,  53,  65, 223 },
        {  45, 224,  65, 225,  38,  53,  65, 223 },
        {  49, 226, 227,  70,  40, 228 },
        { 229 },
        {  65, 230,  78 },
        {  43,  65, 230,  78 },
        {   0 },
        {  66, 231,  83 },
        {  74,  66, 232 },
        {   0 },
        {  39, 233 },
        {  35, 234 },
        {  42, 235 },
        {  52, 236 },
        {  51, 237 },
        {  54, 238 },
        {  86, 239,  77 },
        {  72, 240,  86, 241,  77 },
        {   0 },
        {  36, 242 },
        {  50, 243 },
        {  22, 244 },
        {  67, 245,  81 },
        {  73, 246,  67, 247,  81 },
        {   0 },
        {  41, 248 },
        {  37, 249 },
        {  10, 251 },
        {  11, 250 },
        {  21, 252,  67, 253 },
        {  50, 254,  67, 255 },
        {  49, 256,  65,  40, 257 },
        {   4, 217,  84, 258 },
        {  60, 259 },
        {  49, 260,  65, 230,  78,  40, 261 },
        {  45, 224,  65, 262,  38 },
        { 263 },
        {   4, 264 },
        {  60 },
        {   2, 265 },
        {   3, 266 },
        {  16, 267 },
        {  32, 268 },
        {   5, 269 }
    };

    String[] PARSER_ERROR =
    {
        "",
        "Era esperado fim de programa",
        "Era esperado num_int",
        "Era esperado num_real",
        "Era esperado id",
        "Era esperado literal",
        "Era esperado booleano",
        "Era esperado cadeia",
        "Era esperado caracter",
        "Era esperado de",
        "Era esperado div",
        "Era esperado e",
        "Era esperado enquanto",
        "Era esperado entao",
        "Era esperado escreva",
        "Era esperado faca",
        "Era esperado falso",
        "Era esperado funcao",
        "Era esperado inteiro",
        "Era esperado leia",
        "Era esperado metodo",
        "Era esperado nao",
        "Era esperado ou",
        "Era esperado procedimento",
        "Era esperado programa",
        "Era esperado real",
        "Era esperado ref",
        "Era esperado retorne",
        "Era esperado se",
        "Era esperado senao",
        "Era esperado val",
        "Era esperado var",
        "Era esperado verdadeiro",
        "Era esperado vetor",
        "Era esperado \":\"",
        "Era esperado \"<\"",
        "Era esperado \"+\"",
        "Era esperado \"/\"",
        "Era esperado \"]\"",
        "Era esperado \"=\"",
        "Era esperado \")\"",
        "Era esperado \"*\"",
        "Era esperado \">\"",
        "Era esperado \",\"",
        "Era esperado \"}\"",
        "Era esperado \"[\"",
        "Era esperado \"{\"",
        "Era esperado \";\"",
        "Era esperado \".\"",
        "Era esperado \"(\"",
        "Era esperado \"-\"",
        "Era esperado \"<=\"",
        "Era esperado \">=\"",
        "Era esperado \":=\"",
        "Era esperado \"<>\"",
        "<programa> inválido",
        "<bloco> inválido",
        "<com_composto> inválido",
        "<comando> inválido",
        "<constante> inválido",
        "<constante_explicita> inválido",
        "<dcl_metodo> inválido",
        "<dcl_metodos> inválido",
        "<dcl_var_const> inválido",
        "<dimensao> inválido",
        "<expressao> inválido",
        "<expsimp> inválido",
        "<fator> inválido",
        "<fator_const> inválido",
        "<lid> inválido",
        "<lista_expr> inválido",
        "<mp_par> inválido",
        "<op_add> inválido",
        "<op_mult> inválido",
        "<oprel> inválido",
        "<par_formais> inválido",
        "<rcomid> inválido",
        "<rep_expsimp> inválido",
        "<rep_lexpr> inválido",
        "<rep_lid> inválido",
        "<rep_par> inválido",
        "<rep_termo> inválido",
        "<replistacomando> inválido",
        "<resto_expressao> inválido",
        "<rvar> inválido",
        "<senaoparte> inválido",
        "<termo> inválido",
        "<tipo> inválido",
        "<tipo_metodo> inválido"
    };
}
